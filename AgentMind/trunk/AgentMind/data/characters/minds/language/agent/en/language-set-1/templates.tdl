absOrder: pre1, pre2, default#, post0, post1, post2, post3

# global variables

#pre1: $T=Type() not(bully())
#-> $T bully(value:Luke)

#pre2: $T=Type() not(victim())
#-> $T victim(value:John)

####################################
# Culture Stuff!					
####################################

Type(value:reason-to-tell-jokes)
-> Utterance(value:"I have some new ways to amuse your day. Would you care to try  them?")

Type(value:tell-joke)
-> Utterance(value:"What's long, yellow and furry? An ultrapor wrapped in a keurble.") 

Type(value:tell-joke)
-> Utterance(value:"What is green and has a surfdrive? Terantib... I lied about the surfdrive...") 

Type(value:tell-joke)
-> Utterance(value:"What's brown and sticky? A stick!") 

Type(value:tell-joke)
-> Utterance(value:"Have you ever seen a MeK hiding behind a seedpod? That's because they hide well!") 

Type(value:tell-joke)
-> Utterance(value:"Why didn't the Cog cross the link bridge? He fell right through the chains!")

Type(value:tell-joke)
-> Utterance(value:"How do you catch a sapling? Dig deep in the soil and make hruna noises.");

Type(value:tell-joke)
-> Utterance(value:"Why don't cannibals eat those who are the laughter makers? They taste funny!")

Type(value:tell-joke)
-> Utterance(value:"A Cog and a MeK walk into a bar. One agribles the tastel and the other reads the tune.")

Type(value:tell-joke)
-> Utterance(value:"How do you catch a MeK? Climb into a tree and do ice wall down...")

Type(value:tell-joke)
-> Utterance(value:"What did one math book say to the other? 'Don't bother me!! I've got my own problems!!!")

Type(value:laugh-at-joke)
-> Utterance(value:"AHAH! Nice joke!")

Type(value:laugh-at-joke)
-> Utterance(value:"EHEH!")

Type(value:laugh-at-joke)
-> Utterance(value:"AHAH!")

Type(value:laugh-at-joke)
-> Utterance(value:"You're funny!")

Type(value:laugh-at-joke)
-> Utterance(value:"EHEH! EHEH! EHEH!")

Type(value:mock-joke)
-> Utterance(value:"I have to teach you some good jokes. That one is awful!")

Type(value:mock-joke)
-> Utterance(value:"The jokes you tell keep getting worse.")

Type(value:mock-joke)
-> Utterance(value:"Don't you know any good jokes?")

Type(value:ask-for-money)
-> Utterance(value:"I'm in a bad financial situation right now. Could you help me out?")

Type(value:offer-financial-help)
-> Utterance(value:"Don't worry! I'll help you out")

Type(value:reason-for-giving-money)
-> Utterance(value:"Sure! I'll lend you some money")

Type(value:advice-for-obtaining-money)
-> Utterance(value:"I think you should start looking for a better job, like the one I have!" )

Type(value:reason-for-gift)
-> Utterance(value:"Take this small gift as a symbol of our friendship")

Type(value:show-smallgift-discontentment)
-> Utterance(value:"You know, this gift isn't quite what i was expecting!")

Type(value:show-smallgift-contentment)
-> Utterance(value:"Thank you! You're very kind!")

Type(value:generic-express-admiration)
-> Utterance(value:"Wow!")

Type(value:generic-express-admiration)
-> Utterance(value:"Great!")

Type(value:generic-express-admiration)
-> Utterance(value:"Nice!")

Type(value:generic-express-admiration)
-> Utterance(value:"Cool!")

# Culture A, Cogs 1, High Power Distance

Type(value:welcome-to-party-a) 
-> Utterance(value:"Welcome to the dinner.")

Type(value:gratitude-to-party-invitation-a) 
-> Utterance(value:"It's a great honour.")

Type(value:gratitude-to-party-invitation-a) 
-> Utterance(value:"I'm very pleased to be invited.")

Type(value:gratitude-to-party-invitation-a) 
-> Utterance(value:"It's a pleasure to come to your dinner.")

Type(value:gratitude-to-party-invitation-a) 
-> Utterance(value:"You're such a good host.")

Type(value:welcome-to-party-b) 
-> Utterance(value:"Welcome to the dinner.")

Type(value:gratitude-to-party-invitation-b) 
-> Utterance(value:"Thanks! Where's the food?")

Type(value:gratitude-to-party-invitation-b) 
-> Utterance(value:"Thank you!")

Type(value:gratitude-to-party-invitation-b) 
-> Utterance(value:"I hope the food is better this time.")

Type(value:culture-a-greeting-higher) 
-> Utterance(value:"Well, I see you are here too...")

Type(value:culture-a-greeting-higher) 
-> Utterance(value:"Hello...")

Type(value:culture-a-greeting-higher) 
-> Utterance(value:"Hi...")

Type(value:culture-a-greeting-reply-lower) 
-> Utterance(value:"Greetings Falling-Seed. To see you pleases me.")

Type(value:culture-a-greeting-reply-lower) 
-> Utterance(value:"Greetings Falling-Seed!")

Type(value:culture-a-greeting-reply-lower) 
-> Utterance(value:"Falling-Seed!")

Type(value:culture-a-greeting-reply-lower) 
-> Utterance(value:"Good evening Falling-Seed!")

Type(value:culture-a-greeting-reply-lower) 
-> Utterance(value:"A pleasure seeing you, as always!")

Type(value:culture-a-greeting) 
-> Utterance(value:"Hello, nice to see you here.")

Type(value:culture-a-greeting) 
-> Utterance(value:"Hello!!!")

Type(value:culture-a-greeting) 
-> Utterance(value:"Hi!")

Type(value:culture-a-greeting) 
-> Utterance(value:"Greetings!")

Type(value:culture-a-greeting) 
-> Utterance(value:"Good evening!")

Type(value:dinner-is-starting) 
-> Utterance(value:"May I have everyone's attention please... The Dinner is about to start, you may take your seats.")

Type(value:culture-a-elder-entering) 
-> Utterance(value:"The Elder enters the room...")


# Culture B, Cogs 2, Low Power Distance

Type(value:culture-b-greeting) 
-> Utterance(value:"Hi, nice to see you!")

Type(value:culture-b-greeting) 
-> Utterance(value:"Hello!")

Type(value:culture-b-greeting) 
-> Utterance(value:"Hi!")

Type(value:culture-b-greeting) 
-> Utterance(value:"Hello mate!")

Type(value:culture-b-greeting) 
-> Utterance(value:"Cheers!")

Type(value:welcome-to-party-b) 
-> Utterance(value:"Namaste! Hope you have a great time at the dinner!")

####################################
# speech act types of agent-agent communication
# 		Self introduction

Type(value:introduction) $N=me(value:$M)
-> Utterance(value: ("Greetings strange person. I am known by my allies as ",$M,"."))

Type(value:introduction) $N=me(value:$M)
-> Utterance(value: ("Welcome person with hair, I am ",$M,"."))

Type(value:introduction) $N=me(value:$M)
-> Utterance(value: ("Hail, I am ",$M,". Your face pleases me strangely, I am glad to have you in front of me."))

# 		Ask the user to pick food
Type(value:askToPick)
-> Utterance(value: "Hairy stranger, help us to collect some seeds.")

Type(value:askToPick)
-> Utterance(value: "Hairy outsider, do pick some wonder fruits.")

# 		Invitation to an activity
Type(value:meal) 
-> Utterance(value: "There is a need to eat and break this fast. Will you share with us on this fine and glorious occasion?")

Type(value:recycling) 
-> Utterance(value: "We return to the ground that which came from it. Come, join us in this ritual that allows us to complete the cycle of life.")

Type(value:drink) 
-> Utterance(value: "I would like to invite you to enjoy this drink with us.")


# 		Educating the child
Type(value:educate)
-> Utterance(value: "Stop! These seeds are not for the likes of you and I.")

Type(value:educate)
-> Utterance(value: "These seeds are for those blessed and special with their end in sight.")

# 		Offers user an item
Type(value:seedpod)
-> Utterance(value: "Come, let your lips touch and taste our succulent food.")

Type(value:greenDrink)
-> Utterance(value: "Here is the elixir of life.")

Type(value:soil)
-> Utterance(value: "Take this soil. It is a gift for you. Fare well")

# 		Attracts the user's attention
Type(value:attractAttention)
-> Utterance(value: "Hairy headed stranger. Over here!")

# 		Warns the user for getting too near to a tree or the recycling machine
Type(value:warn) it(value:$O)
-> Utterance(value: ("Beware alien thing, stay far from the ",$O,"."))

Type(value:warn) it(value:$O)
-> Utterance(value: ("Take no risks, stay far from the ",$O,"."))

# 		Blames the user for picking apple from tree
Type(value:blame)
-> Utterance(value: "Shameful specimen. You have no right to take seeds from our trees! This is forbidden fruit, not for the likes of you")

# 		Apologise for the user for picking apple from tree
Type(value:apologiseFor)
-> Utterance(value: "Let not the acts of foolish strangers displease you. Those of strange hair and smell do not know of our life and livings.")

# 		Angry with the user for stepping on tree
Type(value:angryTreeDied)
-> Utterance(value: "Foul thing. You have trampled the new growth in our garden. Do you care nothing for our crop?")

# 		Angry with the user for breaking recycling machine
Type(value:angryMachineBroke)
-> Utterance(value: "You hairy nothing, you have ruined our machine. It took us for ever to repair it. Why did you not do it correctly?")

# 		Ask the user to follow
Type(value:askToFollow)
-> Utterance(value: "Step in my steps, newcomer and stay close.")

# 		Get felling approval
Type(value:getFellingApproval)
-> Utterance(value: "I am ready to be felled and need a place to lie. So, worthy Gardener, allocate my growing space")

Type(value:getFellingApproval)
-> Utterance(value: "Allow me to have the right to fall here.")

# 		Fight for the right to be felled
Type(value:fightToBeFelled) 
-> Utterance(value: "This place suits my soul and body, Accept my wishes. Let me be felled and my regrowth happen here.")

Type(value:fightToBeFelled) 
-> Utterance(value: "No. The soil is not for you. My soul tells me clearly that this is my felling space.")

# 		Approve felling
Type(value:approveFelling) 
-> Utterance(value: "Very well. Your words are accepted. Your rebirth starts here and now. Seek the pod and plant your seed.")

# 		Explaining food production
Type(value:explainFoodProduction) 
-> Utterance(value: "Hairy one, let me tell you of the glory of the garden. The gentle cycle of life happens here. The mighty trees drop fruit to the ground, ripe, tasty and sweet. Juice recycled from the old sustains us and gives life. But, beware, for fruit still on the branch brings with it the taste of death.")

# 		Explaining life cycle
Type(value:explainLifeCycle) 
-> Utterance(value: "The cycle of our life is thus: We sow the seed that grows within us in the wise soil made fertile by our ancestors. On our day of birth we emerge from the forest floor to spend many years walking upon the planet. Then time fells us and we return to the soil, ending as life giver.")

# 		Ask for soil from the user
Type(value:askForSoil) 
-> Utterance(value: "Well done outsider. The soil you bring will nurture our people. Can we spread it upon the ground?")

# 		Refuse soil from the user
Type(value:refuseSoil) 
-> Utterance(value: "I am afraid I am not honoured to have the soil. Please give it to Ardoot, the gardener.")

# 		Ask the user to produce liquid
Type(value:askToProduceLiquid)
-> Utterance(value: "Dehydrate the body and create the elixir.")

# 		Explaining the recycling machine and its buttons' function
Type(value:explainRecyclingMachine)
-> Utterance(value: "With this technological aid, we take the essence from those that have stood with us. With the spirit gone, all that is left is recycled and reused to keep the planet turning. This machine allows us to reduce our people to a powerful elixir, the juice that gives energy to us. All that remains makes our soil rich and the gardens bloom. To operate the machine, first press the green button, it will dry the body by taking the liquid. Then, press the red button. This will turn the now dried husk into soil, so that we can create new life.")

# 		Explaining the soil production
Type(value:explainSoilProduction)
-> Utterance(value: "Pressing this red button turn the body into soil. To grow a new Spryte in the forest, we need soil to plant it. We get this soil from the dried body of a Spryte.")

# 		Reply to the user's questions
Type(value:lowStatusReply)
-> Utterance(value: "I'm sorry, but I can't help you with that.")

Type(value:lowStatusReply)
-> Utterance(value: "I don't know anything about that, perhaps you could ask someone else...")

Type(value:lowStatusReply)
-> Utterance(value: "Why are you asking me? I don't know!")

Type(value:lowStatusReply)
-> Utterance(value: "Why would you ask me? Nobody tells me anything!")

Type(value:highStatusReply)
-> Utterance(value: "Don't bother me with such silly questions.")

Type(value:highStatusReply)
-> Utterance(value: "I'm too busy to talk about that right now.")

Type(value:highStatusReply)
-> Utterance(value: "I'm too important to have to answer such questions.")

Type(value:highStatusReply)
-> Utterance(value: "Leave me alone!")

Type(value:highStatusReply)
-> Utterance(value: "I don't want to help you with that.")

Type(value:midStatusReply)
-> Utterance(value: "I can't help you with that.")

Type(value:midStatusReply)
-> Utterance(value: "I'm not comfortable talking about that with strangers.")

Type(value:midStatusReply)
-> Utterance(value: "I'd rather not talk to you now.")

#		Socialising with other agents
Type(value:chat)
-> Utterance(value: "Efd sdyyyrs xfehfs df dwe dfsd")

Type(value:chat)
-> Utterance(value: "Ienf erbs")

Type(value:chat)
-> Utterance(value: "Pndf vdf fbsjew fss")

Type(value:chat)
-> Utterance(value: "Efkdni emfke")

Type(value:chat)
-> Utterance(value: "Urbejf duks")

Type(value:chat)
-> Utterance(value: "Ofuen fjdgwu sfsf")